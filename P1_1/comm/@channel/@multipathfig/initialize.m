function initialize(h, fig, figTag)
%INITIALIZE  Initialize multipath figure object.

%   Copyright 1996-2010 The MathWorks, Inc.
%   $Revision: 1.1.6.9 $  $Date: 2010/05/20 01:58:14 $

% Make new figure if no figure handle passed.
if (nargin==1)
    fig = figure('integerhandle', 'off');
else
    % Otherwise clear current figure.
    clf(fig);
end

% Set up figure.
if (nargin<3)
    figTag = 'Multipath Channel';
end
set(fig, ...
    'tag', figTag, ...
    'name', figTag,...
    'numbertitle', 'off', ...
    'menubar', 'none', ...
    'toolbar', 'none', ...  
    'renderer', 'zbuffer', ...  % OpenGL is faster but has 3D problems
    'visible', 'off');  % Set invisible until figure children initialized.
h.SavedPosition = get(fig, 'position');

% Store figure handle with multipath figure object.
h.FigureHandle = fig;

% Store multipath figure object in figure's userdata.  Used by figure
% callbacks.
set(fig, 'userdata', h);

% Multipath axes object class names (channel.<name>)
axesClasses = {
    'mpiraxes'    
    'mpfreqaxes'
    'mpirwataxes'
    'mptrajaxes'
    'mpcompaxes'
    'mpenergyaxes'
    'mpdoppleraxes'
    'mpscatteraxes'
    };

% Tags used for multipath axes objects and for menu items
axesTags = {
    'Impulse Response (IR)'
    'Frequency Response (FR)'
    'IR Waterfall'
    'Phasor Trajectory'
    'Multipath Components'
    'Multipath Gain'
    'Doppler Spectrum'
    'Scattering Function'
    };

% Menu item strings for display of composite axes
composites = {
    'IR and FR'
    'Components and Gain'
    'Components and IR'
    'Components, IR, and Phasor'
    };

% Number of multipath axes objects stored in multipath figure
h.NumAxes = length(axesClasses);

% Indices of multipath axes.  Each cell corresponds to a menu item.
axesIndices = num2cell((1:h.NumAxes).');
h.AxesIdxDirectory = [
    axesIndices' ...
    {[1 2] ...
    [5 6] ...
    [5 1] ...
    [5 1 4] ...
    }];

% Multipath axes positions.  Each cell corresponds to a menu item.
% AxesRowDirectory store the row to which each axes belongs.
% AxesWidthDirectory stores a formula for the width.  W and H are the
% width and height of the axes panel, respectively.
h.AxesRowDirectory = {
    1; 1; 1; 1; 1; 1; 1; 1
    [1 2]; [1 2]; [1 2]; [1 2 2]};
h.AxesWidthDirectory = {
    {'W'}; {'W'}; {'W'}; {'W'}; {'W'}; {'W'}; {'W'}; {'W'}
    {'W' 'W'}
    {'W' 'W'}
    {'W' 'W'}
    {'W' 'W-H' 'H'}
    };

% Initialize axes menu and any other uicontrols.
menuItems = [axesTags; composites];    
inituicontrols(h, menuItems);

% Create multipath axes objects.
h.AxesObjects = createaxesobjects(...
    h, axesClasses, axesTags);

% This method sets positions of the axes and uicontrols.
h.setfigposition;

% Make figure visible.
set(fig, 'visible', 'on');
drawnow

% Current channel is initially set to default instantiation.
h.CurrentChannel = channel.multipath;

% Initialize "channel stored" flags.  These keep track of which multipath
% axes objects have knowledge of the most recent multipath channel object.
falseBool = false;
h.ChannelStored = falseBool(ones(1, h.NumAxes));

% Set current multipath axes.
h.CurrentAxesIdx = 1;
h.AxesObjects{h.CurrentAxesIdx}.Active = true;

% If user resizes figure window, setfigposition(figObj) will be called.
set(fig, 'ResizeFcn', 'setfigposition(get(gcf, ''userdata''))');

% If user closes figure window, closefig(figObj) will be called.
set(fig, 'DeleteFcn', 'closefig(get(gcf, ''userdata''))');

% Initialize number of frames plotted.
h.NumFramesPlotted = 0;

%--------------------------------------------------------------------------
function axesObjs = createaxesobjects(figObj, axesClasses, axesTags)
fig = figObj.FigureHandle; %#ok<NASGU>
panel = figObj.UIHandles.AxesPanel; %#ok<NASGU>
M = length(axesClasses);
axesObjs = cell(1, M);
for m = 1:M
    tag = axesTags{m};
    ax = eval(['channel.' axesClasses{m} ...
        '(fig, panel, ''' tag ''', figObj);']);
    axesObjs{m} = ax;
    ax.Active = false;
end

%--------------------------------------------------------------------------
function inituicontrols(h, menuItems)

% Get figure window handle.
fig = h.FigureHandle;
ui = h.UIHandles;  % Structure of ui handles

figColor = get(fig, 'color');

% Text heading for visualization menu
ui.VisMenuText = uicontrol(...
    'parent', fig, ...
    'style', 'text', ...
    'string', 'Visualization:', ...
    'horizontal', 'right', ...
    'backgroundcolor', figColor);

% Visualization menu
ui.VisMenu = uicontrol(...
    'parent', fig, ...
    'style', 'popupmenu', ...
    'tag', 'VisMenu', ...
    'string', menuItems, ...
    'callback', 'selectaxes(get(gcf, ''userdata''), gcbo)');

% Text heading for slider
ui.AnimationMenuText = uicontrol(...
    'parent', fig, ...
    'style', 'text', ...
    'string', 'Animation:', ...
    'horizontal', 'right', ...
    'backgroundcolor', figColor);

% Visualization menu
ui.AnimationMenu = uicontrol(...
    'parent', fig, ...
    'style', 'popupmenu', ...
    'tag', 'AnimMenu', ...
    'string', {'Interframe only', 'Slow', 'Medium', 'Fast'}, ...
    'callback', 'animationmenu(get(gcf, ''userdata''), gcbo)');

% Axes panel
uiAP = uipanel(...
    'parent', fig, ...
    'bordertype', 'beveledin');
ui.AxesPanel = uiAP;

% Control panel
uiCP = uipanel(...
    'parent', uiAP, ...  
    'bordertype', 'none');
ui.ControlPanel = uiCP;

% Text heading for frame start time
ui.FrameCountText = uicontrol(...
    'parent', uiCP, ...
    'style', 'text', ...
    'string', 'Frame count:', ...
    'horizontal', 'right');

% Text for frame start time
ui.FrameCount = uicontrol(...
    'parent', uiCP, ...
    'style', 'text', ...
    'string', '0', ...
    'foregroundcolor', [0 0.5 0], ...
    'fontweight', 'bold', ...
    'horizontal', 'left');

% Text heading for slider
ui.SliderText = uicontrol(...
    'parent', uiCP, ...
    'style', 'text', ...
    'string', 'Sample index:', ...
    'horizontal', 'right');

% Slider for sample number control
ui.Slider = uicontrol(...
    'parent', uiCP, ...
    'style', 'slider', ...
    'min', 0, 'max', 1, ...
    'sliderstep', [0.1 0.1], ...
    'value', 1, ...
    'horizontal', 'r', ...
    'tooltip', 'Set/display sample index within frame');

% h.SliderListener = handle.listener(handle(ui.Slider), 'ActionEvent', ...
%      'setslider(get(gcf, ''userdata''), gco)');
h.SliderListener = addlistener(ui.Slider, 'Action', ...
    @(hSrc, eData) setslider_gcf(h) );

% Text for slider
ui.SampleIdx = uicontrol(...
    'parent', uiCP, ...
    'style', 'text', ...
    'string', '1', ...
    'foregroundcolor', [0 0.5 0], ...
    'fontweight', 'bold', ...
    'horizontal', 'center', ...
    'tooltip', 'Sample index within frame');

% Pause button
ui.PauseButton = uicontrol(...
    'parent', uiCP, ...
    'style', 'togglebutton', ...
    'min', 0, 'max', 1, ...
    'string', 'Pause', ...
    'horizontal', 'left', ...
    'Enable', 'off', ...
    'callback', 'pausebutton(get(gcf, ''userdata''), gcbo);');


% Text heading for edit box (Doppler)
ui.PathNumberText = uicontrol(...
    'parent', uiCP, ...
    'style', 'text', ...
    'visible', 'off', ...
    'string', 'Path number:', ...
    'horizontal', 'right');

% Edit box (Doppler)
ui.PathNumber = uicontrol(...
    'parent', uiCP, ...
    'style', 'edit', ...    
    'visible', 'off', ...
    'tag', 'PathNumber', ...
    'min', 0, 'max', 1, ...
    'string', '1', ...
    'backgroundcolor', [1 1 1], ...
    'horizontal', 'left', ...
    'tooltip', 'Path number', ...
    'callback', 'dopplerpathnumber(get(gcf, ''userdata''), gcbo);');


% Set units and background color for all uicontrols.
uiCell = struct2cell(ui);
set([uiCell{:}], 'units', 'pixels');
%, 'backgroundcolor', get(fig, 'color'));

% Set background color to white for menus.
set([ui.VisMenu ui.AnimationMenu], 'background', [1 1 1]);
   

% Store handles.
h.UIHandles = ui;
