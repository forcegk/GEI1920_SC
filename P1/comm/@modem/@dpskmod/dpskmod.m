function h = dpskmod(varargin)
%DPSKMOD  DPSK Modulator
%   H = MODEM.DPSKMOD(PROPERTY1, VALUE1, ...) constructs a DPSK modulator object
%   H with properties as specified by PROPERTY/VALUE pairs.
%
%   H = MODEM.DPSKMOD(DPSKDEMOD_OBJECT) constructs a DPSK modulator object H by
%   reading the property values from the DPSK demodulator object
%   DPSKDEMOD_OBJECT. The properties that are unique to the DPSK modulator
%   object are set to default values.
%
%   H = MODEM.DPSKMOD(DPSKDEMOD_OBJECT, PROPERTY1, VALUE1, ...) constructs a
%   DPSK modulator object H by reading the property values from the DPSK
%   demodulator object DPSKDEMOD_OBJECT. Additional properties are specified
%   using PROPERTY/VALUE pairs.
%
%   A DPSK modulator object has the following properties. All the properties are
%   writable except for the ones explicitly noted otherwise.
%
%   Type          - Type of modulation object ('DPSK Modulator'). This
%                   property is not writable.
%   M             - Constellation size.
%   PhaseRotation - Specifies the phase rotation (rad) of the modulation.
%                   In this case, the total per-symbol phase shift is the
%                   sum of PhaseRotation and the phase generated by the
%                   differential modulation.  
%   Constellation - Ideal signal constellation. This property is not
%                   writable and is automatically computed based on M.
%   SymbolOrder   - Type of mapping employed for mapping symbols to ideal
%                   constellation points. The choices are: 
%                   'binary'        - for Binary mapping
%                   'gray'          - for Gray mapping
%                   'user-defined'  - for custom mapping
%   SymbolMapping - A list of integer values from 0 to M-1 that correspond to
%                   ideal constellation points. This property is writable only
%                   when SymbolOrder is set to 'user-defined'; otherwise it is
%                   automatically computed. 
%   InputType     - Type of input to be processed by DPSK modulator
%                   object. The choices are: 
%                   'bit'           - for bit/binary input
%                   'integer'       - for integer/symbol input
%   InitialPhase  - Initial phase state of the DPSK modulator.  InitialPhase is
%                   used to calculate the first modulated symbol.
%
%   H = MODEM.DPSKMOD constructs a DPSK modulator object H with default
%   properties. It constructs a modulator object for binary DPSK modulation and
%   is equivalent to:
%   H = MODEM.DPSKMOD('M', 2, 'PHASEROTATION', 0, 'SYMBOLORDER', 'BINARY', ...
%           'INPUTTYPE', 'INTEGER', 'INITIALPHASE', 0) 
%
%   A DPSK modulator object is equipped with four functions for inspection,
%   management, and simulation:
%     - DISP (type "help modem/disp" for detailed help)
%     - COPY (type "help modem/copy" for detailed help)
%     - MODULATE (type "help modem/modulate" for detailed help)
%     - RESET (type "help modem/reset" for detailed help)
%
%   EXAMPLES: 
%
%     % Construct a modulator object for 4-DPSK modulation with initial phase 
%     % pi/4.
%     h = modem.dpskmod('M', 4, 'InitialPhase', pi/4)
%
%     % Construct an object to modulate binary data using 16-DPSK modulation
%     % with pi/8 degrees minimum phase rotation per symbol. The constellation
%     % has Gray mapping.
%     h = modem.dpskmod('M', 16, 'SymbolOrder', 'Gray', ...
%              'PhaseRotation', pi/8, 'InputType', 'Bit')
%
%     % Construct a modulator object from an existing demodulator object for
%     % DPSK demodulation in order to modulate binary inputs.
%     demodObj = modem.dpskdemod('M', 8)  % existing DPSK demodulator
%                                         % object
%     modObj = modem.dpskmod(demodObj)
%
%   See also MODEM, MODEM/TYPES, MODEM/DISP, MODEM/COPY, MODEM/MODULATE,
%   MODEM.DPSKDEMOD

%   @modem/@dpskmod   

%   Copyright 2007-2008 The MathWorks, Inc.
%   $Revision: 1.1.6.3 $  $Date: 2008/08/01 12:18:10 $

h = modem.dpskmod;

% default prop values
h.Type = 'DPSK Modulator';
h.M = 2;
setPrivProp(h, 'ProcessFunction', @modulate_Int);

% Initialize based on the arguments
if nargin ~= 0
    if isa(varargin{1},'modem.dpskdemod')
        % modem.pskmod(pskdemod_object, ...) form
        initFromObject(h, varargin{:});
    else
        initObject(h, varargin{:});
    end
end

%-------------------------------------------------------------------------------
% [EOF]
